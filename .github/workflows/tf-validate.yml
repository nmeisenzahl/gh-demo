name: TF PR validation

on:
  workflow_dispatch:
  pull_request:
    branches:
      - "main"
    paths:
      - "src/infra/**"

permissions:
  id-token: write
  contents: read
  pull-requests: write

defaults:
  run:
    working-directory: /src/infra
    shell: bash

jobs:
  validate:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: src
    env:
      ARM_CLIENT_ID: '1405fd4f-f9e7-4076-b1cb-6237b7b115ae'
      ARM_SUBSCRIPTION_ID: 'a45decf8-969d-439e-84e9-3bc90242b8fc'
      ARM_TENANT_ID: 'f1847c27-90be-4b38-a1b7-bd3a2029122f'
      ARM_USE_OIDC: true
      BACKEND_RG_NAME: 'github-demo-tf-rg'
      BACKEND_SA_NAME: 'tf0state0stac'
      BACKEND_SC_NAME: 'tf0state0container'
      STAGE: 'prod'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: 'Az CLI login'
        uses: azure/login@v1
        with:
          client-id: ${{ env.ARM_CLIENT_ID }}
          tenant-id: ${{ env.ARM_TENANT_ID }}
          subscription-id: ${{ env.ARM_SUBSCRIPTION_ID }}

      - name: Terraform Init
        id: init
        run: |
          terraform init -reconfigure -upgrade -input=false \
            -backend-config="resource_group_name=${{ env.BACKEND_RG_NAME }}" \
            -backend-config="storage_account_name=${{ env.BACKEND_SA_NAME }}" \
            -backend-config="container_name=${{ env.BACKEND_SC_NAME }}" \
            -backend-config="key=${{ env.STAGE }}.tfstate"

      - name: Terraform Format
        id: fmt
        run: terraform fmt --check
        continue-on-error: true

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -out ./${{ env.STAGE }}_tfplan.out
        continue-on-error: true

      - uses: actions/github-script@v6.4.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })

            // 2. Prepare format of the comment
            const output = `#### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
            #### Terraform Validation 🤖\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
